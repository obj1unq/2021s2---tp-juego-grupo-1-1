import wollok.game.*
import personajes.*
import complementos.*
import inicio.*


describe "Pokemon test" {

  const trampaEnCamino = new Trampa(position = game.at(7,6), energiaQueBrinda = -80, defensaQueBrinda = -80)
  const bayaFrambu = new BayaFrambu(position = game.at(8,6))
  const bayaPinia = new BayaPinia(position = game.at(9,6))
  const bayaLatano = new BayaLatano(position = game.at(10,6))
  
  const combatiente = new Pokemon(position = game.at(1,2), energia = 400, image = "lapras-izq.png")
    
  method initialize(){
    game.clear()
    game.addVisual(charmander)
  }
  
  test "Charmander está en el laberinto" {
		assert.equals(charmander.position(), game.at(1,1))
  }
	
  test "Charmander cae en la trampa y pierde energía" {
    charmander.meEncontre(trampaEnCamino)
    assert.equals(20,charmander.energia())
    assert.equals(20,charmander.defensa())
  }
   
  test "Charmander ataque valores máximos" {
  	charmander.modificarEnergia(bayaFrambu)
  	assert.equals(140, charmander.energia())
  	charmander.modificarAtaque(bayaPinia)
  	assert.equals(45, charmander.ataque())
  	charmander.modificarDefensa(bayaLatano)
  	assert.equals(110, charmander.defensa())
  }
  
  test "Perdí" {
  	charmander.energia(0)
  	assert.throwsException({charmander.validarEstado()})
  }
  
  test "oponente recibe danho de ataque" {
		combatiente.restarEnergiaTrasAtaque(charmander)
		assert.equals(360, combatiente.energia())
	}
}


describe "situaciones contra pokemons, medallas y nivel" {
	
	method initialize() {
		config.labCero().iniciar()
		
	}
	
	test "ataque sobre gengar hasta debilitarlo" {
		charmander.position(game.at(17,10))
		const gengarEnGuardia = game.uniqueCollider(charmander)
		
		gengarEnGuardia.recibirAtaqueDe(charmander)
		assert.equals(60, gengarEnGuardia.energia())
		gengarEnGuardia.recibirAtaqueDe(charmander)
		gengarEnGuardia.recibirAtaqueDe(charmander)
		assert.that(gengarEnGuardia.estoyDebilitado())
	}
	
	test "machamp atrapo a charmander" {
		charmander.position(game.at(7,10))
		charmander.meEncontre(game.uniqueCollider(charmander))
		assert.equals(0, charmander.energia())
	}
	
	test "encuentra medalla" {
		charmander.position(game.at(1,7))
		charmander.meEncontre(game.uniqueCollider(charmander))
		assert.equals(1, charmander.medallasRecogidas().size())
	}
	
	test "pasa a siguiente nivel" {
		// Al pasar de nivel se resetea la posicion de charmander y se verifica que suceda
		charmander.position(game.at(12,3))
		charmander.meEncontre(game.uniqueCollider(charmander))
		assert.equals(game.at(1,1), charmander.position())
	}
}

describe "movimiento de pokemon guardias" {
	
	method initialize() {
		config.labCero().iniciar()
		charmander.position(game.at(12,5))
	}
	
	test "direccion de machamp y avance" {
		const machampEnGuardia = game.uniqueCollider(charmander)
		assert.equals(derecha, machampEnGuardia.direccion())
		charmander.position(game.at(1,1))
		
		6.times({i => machampEnGuardia.moverSigPosicion()})
		assert.equals(game.at(18,5), machampEnGuardia.position())
		
		machampEnGuardia.moverSigPosicion()
		assert.equals(izquierda, machampEnGuardia.direccion())
		assert.equals(game.at(17,5), machampEnGuardia.position())
	}
	
	test "encuentro con charmander" {
		const machampEnGuardia = game.uniqueCollider(charmander)
		
		charmander.position(game.at(14, 5))
		2.times({i => machampEnGuardia.moverSigPosicion()})
		assert.that(machampEnGuardia.estoyEnCombate())
	}
}



